//
// ExampleResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "PetstoreClientAPI.ExampleResponse")
public typealias ExampleResponse = PetstoreClientAPI.ExampleResponse

extension PetstoreClientAPI {

/** dummy */
public final class ExampleResponse: Codable, JSONEncodable, Hashable {

    public var emptyString: String? = ""
    public var numberString: String? = "42"
    public var boolString: String? = "false"
    public var nullString: String? = "null"
    public var aBool: Bool? = false
    public var zero: Int? = 0

    public init(emptyString: String? = "", numberString: String? = "42", boolString: String? = "false", nullString: String? = "null", aBool: Bool? = false, zero: Int? = 0) {
        self.emptyString = emptyString
        self.numberString = numberString
        self.boolString = boolString
        self.nullString = nullString
        self.aBool = aBool
        self.zero = zero
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case emptyString
        case numberString
        case boolString
        case nullString
        case aBool
        case zero
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(emptyString, forKey: .emptyString)
        try container.encodeIfPresent(numberString, forKey: .numberString)
        try container.encodeIfPresent(boolString, forKey: .boolString)
        try container.encodeIfPresent(nullString, forKey: .nullString)
        try container.encodeIfPresent(aBool, forKey: .aBool)
        try container.encodeIfPresent(zero, forKey: .zero)
    }

    public static func == (lhs: ExampleResponse, rhs: ExampleResponse) -> Bool {
        lhs.emptyString == rhs.emptyString &&
        lhs.numberString == rhs.numberString &&
        lhs.boolString == rhs.boolString &&
        lhs.nullString == rhs.nullString &&
        lhs.aBool == rhs.aBool &&
        lhs.zero == rhs.zero
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(emptyString?.hashValue)
        hasher.combine(numberString?.hashValue)
        hasher.combine(boolString?.hashValue)
        hasher.combine(nullString?.hashValue)
        hasher.combine(aBool?.hashValue)
        hasher.combine(zero?.hashValue)
        
    }
}

}
