{-
   dummy
   dummy

   The version of the OpenAPI document: dummy

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( Dummy200Response
    , Dummy200ResponseOuterProp
    , Dummy200ResponseOuterPropInnerProp
    , ExampleResponse
    , Node, NodeLeft(..), NodeRight(..)
    , OtherObject
    , encodeDummy200Response
    , encodeDummy200ResponseOuterProp
    , encodeDummy200ResponseOuterPropInnerProp
    , encodeExampleResponse
    , encodeNode
    , encodeOtherObject
    , dummy200ResponseDecoder
    , dummy200ResponseOuterPropDecoder
    , dummy200ResponseOuterPropInnerPropDecoder
    , exampleResponseDecoder
    , nodeDecoder
    , otherObjectDecoder
    )

import Api
import Dict
import Json.Decode
import Json.Encode


-- MODEL


type alias Dummy200Response =
    { outerProp : Maybe Dummy200ResponseOuterProp
    }


type alias Dummy200ResponseOuterProp =
    { innerProp : Maybe Dummy200ResponseOuterPropInnerProp
    }


type alias Dummy200ResponseOuterPropInnerProp =
    { myBool : Maybe Bool
    }


{-| dummy
-}
type alias ExampleResponse =
    { emptyString : Maybe String
    , numberString : Maybe String
    , boolString : Maybe String
    , nullString : Maybe String
    , aBool : Maybe Bool
    , zero : Maybe Int
    }


{-| dummy
-}
type alias Node =
    { left : NodeLeft
    , right : NodeRight
    }


type NodeLeft = NodeLeft (Maybe Node)


unwrapNodeLeft : NodeLeft -> Maybe Node
unwrapNodeLeft (NodeLeft left) = left


type NodeRight = NodeRight (Maybe Node)


unwrapNodeRight : NodeRight -> Maybe Node
unwrapNodeRight (NodeRight right) = right


{-| dummy
-}
type alias OtherObject =
    { myOnlyProperty2 : Maybe ExampleResponse
    }


-- ENCODER


encodeDummy200Response : Dummy200Response -> Json.Encode.Value
encodeDummy200Response =
    encodeObject << encodeDummy200ResponsePairs


encodeDummy200ResponseWithTag : ( String, String ) -> Dummy200Response -> Json.Encode.Value
encodeDummy200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeDummy200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDummy200ResponsePairs : Dummy200Response -> List EncodedField
encodeDummy200ResponsePairs model =
    let
        pairs =
            [ maybeEncode "outerProp" encodeDummy200ResponseOuterProp model.outerProp
            ]
    in
    pairs


encodeDummy200ResponseOuterProp : Dummy200ResponseOuterProp -> Json.Encode.Value
encodeDummy200ResponseOuterProp =
    encodeObject << encodeDummy200ResponseOuterPropPairs


encodeDummy200ResponseOuterPropWithTag : ( String, String ) -> Dummy200ResponseOuterProp -> Json.Encode.Value
encodeDummy200ResponseOuterPropWithTag (tagField, tag) model =
    encodeObject (encodeDummy200ResponseOuterPropPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDummy200ResponseOuterPropPairs : Dummy200ResponseOuterProp -> List EncodedField
encodeDummy200ResponseOuterPropPairs model =
    let
        pairs =
            [ maybeEncode "innerProp" encodeDummy200ResponseOuterPropInnerProp model.innerProp
            ]
    in
    pairs


encodeDummy200ResponseOuterPropInnerProp : Dummy200ResponseOuterPropInnerProp -> Json.Encode.Value
encodeDummy200ResponseOuterPropInnerProp =
    encodeObject << encodeDummy200ResponseOuterPropInnerPropPairs


encodeDummy200ResponseOuterPropInnerPropWithTag : ( String, String ) -> Dummy200ResponseOuterPropInnerProp -> Json.Encode.Value
encodeDummy200ResponseOuterPropInnerPropWithTag (tagField, tag) model =
    encodeObject (encodeDummy200ResponseOuterPropInnerPropPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDummy200ResponseOuterPropInnerPropPairs : Dummy200ResponseOuterPropInnerProp -> List EncodedField
encodeDummy200ResponseOuterPropInnerPropPairs model =
    let
        pairs =
            [ maybeEncode "myBool" Json.Encode.bool model.myBool
            ]
    in
    pairs


encodeExampleResponse : ExampleResponse -> Json.Encode.Value
encodeExampleResponse =
    encodeObject << encodeExampleResponsePairs


encodeExampleResponseWithTag : ( String, String ) -> ExampleResponse -> Json.Encode.Value
encodeExampleResponseWithTag (tagField, tag) model =
    encodeObject (encodeExampleResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeExampleResponsePairs : ExampleResponse -> List EncodedField
encodeExampleResponsePairs model =
    let
        pairs =
            [ maybeEncode "emptyString" Json.Encode.string model.emptyString
            , maybeEncode "numberString" Json.Encode.string model.numberString
            , maybeEncode "boolString" Json.Encode.string model.boolString
            , maybeEncode "nullString" Json.Encode.string model.nullString
            , maybeEncode "aBool" Json.Encode.bool model.aBool
            , maybeEncode "zero" Json.Encode.int model.zero
            ]
    in
    pairs


encodeNode : Node -> Json.Encode.Value
encodeNode =
    encodeObject << encodeNodePairs


encodeNodeWithTag : ( String, String ) -> Node -> Json.Encode.Value
encodeNodeWithTag (tagField, tag) model =
    encodeObject (encodeNodePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeNodePairs : Node -> List EncodedField
encodeNodePairs model =
    let
        pairs =
            [ maybeEncode "left" encodeNode <| unwrapNodeLeft model.left
            , maybeEncode "right" encodeNode <| unwrapNodeRight model.right
            ]
    in
    pairs


encodeOtherObject : OtherObject -> Json.Encode.Value
encodeOtherObject =
    encodeObject << encodeOtherObjectPairs


encodeOtherObjectWithTag : ( String, String ) -> OtherObject -> Json.Encode.Value
encodeOtherObjectWithTag (tagField, tag) model =
    encodeObject (encodeOtherObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOtherObjectPairs : OtherObject -> List EncodedField
encodeOtherObjectPairs model =
    let
        pairs =
            [ maybeEncode "myOnlyProperty2" encodeExampleResponse model.myOnlyProperty2
            ]
    in
    pairs


-- DECODER


dummy200ResponseDecoder : Json.Decode.Decoder Dummy200Response
dummy200ResponseDecoder =
    Json.Decode.succeed Dummy200Response
        |> maybeDecode "outerProp" dummy200ResponseOuterPropDecoder Nothing


dummy200ResponseOuterPropDecoder : Json.Decode.Decoder Dummy200ResponseOuterProp
dummy200ResponseOuterPropDecoder =
    Json.Decode.succeed Dummy200ResponseOuterProp
        |> maybeDecode "innerProp" dummy200ResponseOuterPropInnerPropDecoder Nothing


dummy200ResponseOuterPropInnerPropDecoder : Json.Decode.Decoder Dummy200ResponseOuterPropInnerProp
dummy200ResponseOuterPropInnerPropDecoder =
    Json.Decode.succeed Dummy200ResponseOuterPropInnerProp
        |> maybeDecode "myBool" Json.Decode.bool Nothing


exampleResponseDecoder : Json.Decode.Decoder ExampleResponse
exampleResponseDecoder =
    Json.Decode.succeed ExampleResponse
        |> maybeDecode "emptyString" Json.Decode.string (Just "")
        |> maybeDecode "numberString" Json.Decode.string (Just "42")
        |> maybeDecode "boolString" Json.Decode.string (Just "false")
        |> maybeDecode "nullString" Json.Decode.string (Just "null")
        |> maybeDecode "aBool" Json.Decode.bool (Just False)
        |> maybeDecode "zero" Json.Decode.int (Just 0)


nodeDecoder : Json.Decode.Decoder Node
nodeDecoder =
    Json.Decode.succeed Node
        |> maybeDecodeLazy NodeLeft "left" (Json.Decode.lazy (\_ -> nodeDecoder)) Nothing
        |> maybeDecodeLazy NodeRight "right" (Json.Decode.lazy (\_ -> nodeDecoder)) Nothing


otherObjectDecoder : Json.Decode.Decoder OtherObject
otherObjectDecoder =
    Json.Decode.succeed OtherObject
        |> maybeDecode "myOnlyProperty2" exampleResponseDecoder Nothing




-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f