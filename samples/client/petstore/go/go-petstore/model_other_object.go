/*
dummy

dummy

API version: dummy
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package petstore

import (
	"encoding/json"
)

// checks if the OtherObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OtherObject{}

// OtherObject dummy
type OtherObject struct {
	MyOnlyProperty2 *ExampleResponse `json:"myOnlyProperty2,omitempty"`
}

// NewOtherObject instantiates a new OtherObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOtherObject() *OtherObject {
	this := OtherObject{}
	return &this
}

// NewOtherObjectWithDefaults instantiates a new OtherObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOtherObjectWithDefaults() *OtherObject {
	this := OtherObject{}
	return &this
}

// GetMyOnlyProperty2 returns the MyOnlyProperty2 field value if set, zero value otherwise.
func (o *OtherObject) GetMyOnlyProperty2() ExampleResponse {
	if o == nil || IsNil(o.MyOnlyProperty2) {
		var ret ExampleResponse
		return ret
	}
	return *o.MyOnlyProperty2
}

// GetMyOnlyProperty2Ok returns a tuple with the MyOnlyProperty2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OtherObject) GetMyOnlyProperty2Ok() (*ExampleResponse, bool) {
	if o == nil || IsNil(o.MyOnlyProperty2) {
		return nil, false
	}
	return o.MyOnlyProperty2, true
}

// HasMyOnlyProperty2 returns a boolean if a field has been set.
func (o *OtherObject) HasMyOnlyProperty2() bool {
	if o != nil && !IsNil(o.MyOnlyProperty2) {
		return true
	}

	return false
}

// SetMyOnlyProperty2 gets a reference to the given ExampleResponse and assigns it to the MyOnlyProperty2 field.
func (o *OtherObject) SetMyOnlyProperty2(v ExampleResponse) {
	o.MyOnlyProperty2 = &v
}

func (o OtherObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OtherObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MyOnlyProperty2) {
		toSerialize["myOnlyProperty2"] = o.MyOnlyProperty2
	}
	return toSerialize, nil
}

type NullableOtherObject struct {
	value *OtherObject
	isSet bool
}

func (v NullableOtherObject) Get() *OtherObject {
	return v.value
}

func (v *NullableOtherObject) Set(val *OtherObject) {
	v.value = val
	v.isSet = true
}

func (v NullableOtherObject) IsSet() bool {
	return v.isSet
}

func (v *NullableOtherObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOtherObject(val *OtherObject) *NullableOtherObject {
	return &NullableOtherObject{value: val, isSet: true}
}

func (v NullableOtherObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOtherObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


