/* tslint:disable */
/* eslint-disable */
/**
 * dummy
 * dummy
 *
 * The version of the OpenAPI document: dummy
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {ApiRecordUtils, knownRecordFactories} from "../runtimeSagasAndRecords";
import {getApiEntitiesState} from "../ApiEntitiesSelectors"
import {List, Record, RecordOf, Map} from 'immutable';
import {Schema, schema, NormalizedSchema} from "normalizr";
import {select, call} from "redux-saga/effects";

import {
    Node,
} from './Node';



export const NodeRecordProps = {
    recType: "NodeApiRecord" as "NodeApiRecord",
    left: (NodeRecord(), null as NodeRecord | null),
    right: (NodeRecord(), null as NodeRecord | null),
};

export type NodeRecordPropsType = typeof NodeRecordProps;
export const NodeRecord = Record(NodeRecordProps, NodeRecordProps.recType);
export type NodeRecord = RecordOf<NodeRecordPropsType>;

knownRecordFactories.set(NodeRecordProps.recType, NodeRecord);


class NodeRecordUtils extends ApiRecordUtils<Node, NodeRecord> {
    public normalize(apiObject: Node, asEntity?: boolean): Node {
        (apiObject as any).recType = NodeRecordProps.recType;
        if (apiObject.left) { nodeRecordUtils.normalize(apiObject.left); } 
        if (apiObject.right) { nodeRecordUtils.normalize(apiObject.right); } 
        return apiObject;
    }

    public toApi(record: NodeRecord): Node {
        const apiObject = super.toApi(record);
        if (record.left) { apiObject.left = nodeRecordUtils.toApi(record.left); } 
        if (record.right) { apiObject.right = nodeRecordUtils.toApi(record.right); } 
        return apiObject;
    }
}

export const nodeRecordUtils = new NodeRecordUtils();


