/**
 * dummy
 * dummy
 *
 * The version of the OpenAPI document: dummy
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestPetstoreClient/model/OtherObject.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OtherObject::OtherObject()
{
    m_MyOnlyProperty2IsSet = false;
}

OtherObject::~OtherObject()
{
}

void OtherObject::validate()
{
    // TODO: implement validation
}

web::json::value OtherObject::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MyOnlyProperty2IsSet)
    {
        val[utility::conversions::to_string_t(U("myOnlyProperty2"))] = ModelBase::toJson(m_MyOnlyProperty2);
    }

    return val;
}

bool OtherObject::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("myOnlyProperty2"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("myOnlyProperty2")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ExampleResponse> refVal_setMyOnlyProperty2;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMyOnlyProperty2);
            setMyOnlyProperty2(refVal_setMyOnlyProperty2);
        }
    }
    return ok;
}

void OtherObject::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_MyOnlyProperty2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("myOnlyProperty2")), m_MyOnlyProperty2));
    }
}

bool OtherObject::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("myOnlyProperty2"))))
    {
        std::shared_ptr<ExampleResponse> refVal_setMyOnlyProperty2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("myOnlyProperty2"))), refVal_setMyOnlyProperty2 );
        setMyOnlyProperty2(refVal_setMyOnlyProperty2);
    }
    return ok;
}

std::shared_ptr<ExampleResponse> OtherObject::getMyOnlyProperty2() const
{
    return m_MyOnlyProperty2;
}

void OtherObject::setMyOnlyProperty2(const std::shared_ptr<ExampleResponse>& value)
{
    m_MyOnlyProperty2 = value;
    m_MyOnlyProperty2IsSet = true;
}

bool OtherObject::myOnlyProperty2IsSet() const
{
    return m_MyOnlyProperty2IsSet;
}

void OtherObject::unsetMyOnlyProperty2()
{
    m_MyOnlyProperty2IsSet = false;
}
}
}
}
}


