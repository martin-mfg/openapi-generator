/**
 * dummy
 * dummy
 *
 * The version of the OpenAPI document: dummy
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestPetstoreClient/model/ExampleResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ExampleResponse::ExampleResponse()
{
    m_MyOnlyPropertyIsSet = false;
}

ExampleResponse::~ExampleResponse()
{
}

void ExampleResponse::validate()
{
    // TODO: implement validation
}

web::json::value ExampleResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MyOnlyPropertyIsSet)
    {
        val[utility::conversions::to_string_t(U("myOnlyProperty"))] = ModelBase::toJson(m_MyOnlyProperty);
    }

    return val;
}

bool ExampleResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("myOnlyProperty"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("myOnlyProperty")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OtherObject> refVal_setMyOnlyProperty;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMyOnlyProperty);
            setMyOnlyProperty(refVal_setMyOnlyProperty);
        }
    }
    return ok;
}

void ExampleResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_MyOnlyPropertyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("myOnlyProperty")), m_MyOnlyProperty));
    }
}

bool ExampleResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("myOnlyProperty"))))
    {
        std::shared_ptr<OtherObject> refVal_setMyOnlyProperty;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("myOnlyProperty"))), refVal_setMyOnlyProperty );
        setMyOnlyProperty(refVal_setMyOnlyProperty);
    }
    return ok;
}

std::shared_ptr<OtherObject> ExampleResponse::getMyOnlyProperty() const
{
    return m_MyOnlyProperty;
}

void ExampleResponse::setMyOnlyProperty(const std::shared_ptr<OtherObject>& value)
{
    m_MyOnlyProperty = value;
    m_MyOnlyPropertyIsSet = true;
}

bool ExampleResponse::myOnlyPropertyIsSet() const
{
    return m_MyOnlyPropertyIsSet;
}

void ExampleResponse::unsetMyOnlyProperty()
{
    m_MyOnlyPropertyIsSet = false;
}
}
}
}
}


