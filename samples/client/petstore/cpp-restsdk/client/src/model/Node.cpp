/**
 * dummy
 * dummy
 *
 * The version of the OpenAPI document: dummy
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestPetstoreClient/model/Node.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Node::Node()
{
    m_LeftIsSet = false;
    m_RightIsSet = false;
}

Node::~Node()
{
}

void Node::validate()
{
    // TODO: implement validation
}

web::json::value Node::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_LeftIsSet)
    {
        val[utility::conversions::to_string_t(U("left"))] = ModelBase::toJson(m_Left);
    }
    if(m_RightIsSet)
    {
        val[utility::conversions::to_string_t(U("right"))] = ModelBase::toJson(m_Right);
    }

    return val;
}

bool Node::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("left"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("left")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Node> refVal_setLeft;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLeft);
            setLeft(refVal_setLeft);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("right"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("right")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Node> refVal_setRight;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRight);
            setRight(refVal_setRight);
        }
    }
    return ok;
}

void Node::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_LeftIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("left")), m_Left));
    }
    if(m_RightIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("right")), m_Right));
    }
}

bool Node::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("left"))))
    {
        std::shared_ptr<Node> refVal_setLeft;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("left"))), refVal_setLeft );
        setLeft(refVal_setLeft);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("right"))))
    {
        std::shared_ptr<Node> refVal_setRight;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("right"))), refVal_setRight );
        setRight(refVal_setRight);
    }
    return ok;
}

std::shared_ptr<Node> Node::getLeft() const
{
    return m_Left;
}

void Node::setLeft(const std::shared_ptr<Node>& value)
{
    m_Left = value;
    m_LeftIsSet = true;
}

bool Node::leftIsSet() const
{
    return m_LeftIsSet;
}

void Node::unsetLeft()
{
    m_LeftIsSet = false;
}
std::shared_ptr<Node> Node::getRight() const
{
    return m_Right;
}

void Node::setRight(const std::shared_ptr<Node>& value)
{
    m_Right = value;
    m_RightIsSet = true;
}

bool Node::rightIsSet() const
{
    return m_RightIsSet;
}

void Node::unsetRight()
{
    m_RightIsSet = false;
}
}
}
}
}


