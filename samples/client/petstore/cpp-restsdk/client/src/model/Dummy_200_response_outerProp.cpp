/**
 * dummy
 * dummy
 *
 * The version of the OpenAPI document: dummy
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestPetstoreClient/model/Dummy_200_response_outerProp.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Dummy_200_response_outerProp::Dummy_200_response_outerProp()
{
    m_InnerPropIsSet = false;
}

Dummy_200_response_outerProp::~Dummy_200_response_outerProp()
{
}

void Dummy_200_response_outerProp::validate()
{
    // TODO: implement validation
}

web::json::value Dummy_200_response_outerProp::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_InnerPropIsSet)
    {
        val[utility::conversions::to_string_t(U("innerProp"))] = ModelBase::toJson(m_InnerProp);
    }

    return val;
}

bool Dummy_200_response_outerProp::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("innerProp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("innerProp")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Dummy_200_response_outerProp_innerProp> refVal_setInnerProp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInnerProp);
            setInnerProp(refVal_setInnerProp);
        }
    }
    return ok;
}

void Dummy_200_response_outerProp::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_InnerPropIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("innerProp")), m_InnerProp));
    }
}

bool Dummy_200_response_outerProp::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("innerProp"))))
    {
        std::shared_ptr<Dummy_200_response_outerProp_innerProp> refVal_setInnerProp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("innerProp"))), refVal_setInnerProp );
        setInnerProp(refVal_setInnerProp);
    }
    return ok;
}

std::shared_ptr<Dummy_200_response_outerProp_innerProp> Dummy_200_response_outerProp::getInnerProp() const
{
    return m_InnerProp;
}

void Dummy_200_response_outerProp::setInnerProp(const std::shared_ptr<Dummy_200_response_outerProp_innerProp>& value)
{
    m_InnerProp = value;
    m_InnerPropIsSet = true;
}

bool Dummy_200_response_outerProp::innerPropIsSet() const
{
    return m_InnerPropIsSet;
}

void Dummy_200_response_outerProp::unsetInnerProp()
{
    m_InnerPropIsSet = false;
}
}
}
}
}


