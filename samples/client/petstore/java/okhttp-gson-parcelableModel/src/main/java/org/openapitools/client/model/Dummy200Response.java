/*
 * dummy
 * dummy
 *
 * The version of the OpenAPI document: dummy
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.Dummy200ResponseOuterProp;
import android.os.Parcelable;
import android.os.Parcel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Dummy200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Dummy200Response implements Parcelable {
  public static final String SERIALIZED_NAME_OUTER_PROP = "outerProp";
  @SerializedName(SERIALIZED_NAME_OUTER_PROP)
  private Dummy200ResponseOuterProp outerProp;

  public Dummy200Response() {
  }

  public Dummy200Response outerProp(Dummy200ResponseOuterProp outerProp) {
    
    this.outerProp = outerProp;
    return this;
  }

   /**
   * Get outerProp
   * @return outerProp
  **/
  @javax.annotation.Nullable
  public Dummy200ResponseOuterProp getOuterProp() {
    return outerProp;
  }


  public void setOuterProp(Dummy200ResponseOuterProp outerProp) {
    this.outerProp = outerProp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dummy200Response dummy200Response = (Dummy200Response) o;
    return Objects.equals(this.outerProp, dummy200Response.outerProp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(outerProp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dummy200Response {\n");
    sb.append("    outerProp: ").append(toIndentedString(outerProp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public void writeToParcel(Parcel out, int flags) {
    out.writeValue(outerProp);
  }

  Dummy200Response(Parcel in) {
    outerProp = (Dummy200ResponseOuterProp)in.readValue(Dummy200ResponseOuterProp.class.getClassLoader());
  }

  public int describeContents() {
    return 0;
  }

  public static final Parcelable.Creator<Dummy200Response> CREATOR = new Parcelable.Creator<Dummy200Response>() {
    public Dummy200Response createFromParcel(Parcel in) {
      return new Dummy200Response(in);
    }
    public Dummy200Response[] newArray(int size) {
      return new Dummy200Response[size];
    }
  };

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("outerProp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Dummy200Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Dummy200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dummy200Response is not found in the empty JSON string", Dummy200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Dummy200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dummy200Response` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `outerProp`
      if (jsonObj.get("outerProp") != null && !jsonObj.get("outerProp").isJsonNull()) {
        Dummy200ResponseOuterProp.validateJsonObject(jsonObj.getAsJsonObject("outerProp"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dummy200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dummy200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dummy200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dummy200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<Dummy200Response>() {
           @Override
           public void write(JsonWriter out, Dummy200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dummy200Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Dummy200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Dummy200Response
  * @throws IOException if the JSON string is invalid with respect to Dummy200Response
  */
  public static Dummy200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dummy200Response.class);
  }

 /**
  * Convert an instance of Dummy200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

