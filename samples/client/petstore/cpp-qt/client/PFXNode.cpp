/**
 * dummy
 * dummy
 *
 * The version of the OpenAPI document: dummy
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "PFXNode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "PFXHelpers.h"

namespace test_namespace {

PFXNode::PFXNode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

PFXNode::PFXNode() {
    this->initializeModel();
}

PFXNode::~PFXNode() {}

void PFXNode::initializeModel() {

    m_left_isSet = false;
    m_left_isValid = false;

    m_right_isSet = false;
    m_right_isValid = false;
}

void PFXNode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void PFXNode::fromJsonObject(QJsonObject json) {

    m_left_isValid = ::test_namespace::fromJsonValue(left, json[QString("left")]);
    m_left_isSet = !json[QString("left")].isNull() && m_left_isValid;

    m_right_isValid = ::test_namespace::fromJsonValue(right, json[QString("right")]);
    m_right_isSet = !json[QString("right")].isNull() && m_right_isValid;
}

QString PFXNode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject PFXNode::asJsonObject() const {
    QJsonObject obj;
    if (left.isSet()) {
        obj.insert(QString("left"), ::test_namespace::toJsonValue(left));
    }
    if (right.isSet()) {
        obj.insert(QString("right"), ::test_namespace::toJsonValue(right));
    }
    return obj;
}

PFXNode PFXNode::getLeft() const {
    return left;
}
void PFXNode::setLeft(const PFXNode &left) {
    this->left = left;
    this->m_left_isSet = true;
}

bool PFXNode::is_left_Set() const{
    return m_left_isSet;
}

bool PFXNode::is_left_Valid() const{
    return m_left_isValid;
}

PFXNode PFXNode::getRight() const {
    return right;
}
void PFXNode::setRight(const PFXNode &right) {
    this->right = right;
    this->m_right_isSet = true;
}

bool PFXNode::is_right_Set() const{
    return m_right_isSet;
}

bool PFXNode::is_right_Valid() const{
    return m_right_isValid;
}

bool PFXNode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (left.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (right.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool PFXNode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace test_namespace
