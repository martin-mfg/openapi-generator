/**
 * dummy
 * dummy
 *
 * The version of the OpenAPI document: dummy
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "PFXOtherObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "PFXHelpers.h"

namespace test_namespace {

PFXOtherObject::PFXOtherObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

PFXOtherObject::PFXOtherObject() {
    this->initializeModel();
}

PFXOtherObject::~PFXOtherObject() {}

void PFXOtherObject::initializeModel() {

    m_my_only_property2_isSet = false;
    m_my_only_property2_isValid = false;
}

void PFXOtherObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void PFXOtherObject::fromJsonObject(QJsonObject json) {

    m_my_only_property2_isValid = ::test_namespace::fromJsonValue(my_only_property2, json[QString("myOnlyProperty2")]);
    m_my_only_property2_isSet = !json[QString("myOnlyProperty2")].isNull() && m_my_only_property2_isValid;
}

QString PFXOtherObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject PFXOtherObject::asJsonObject() const {
    QJsonObject obj;
    if (my_only_property2.isSet()) {
        obj.insert(QString("myOnlyProperty2"), ::test_namespace::toJsonValue(my_only_property2));
    }
    return obj;
}

PFXExampleResponse PFXOtherObject::getMyOnlyProperty2() const {
    return my_only_property2;
}
void PFXOtherObject::setMyOnlyProperty2(const PFXExampleResponse &my_only_property2) {
    this->my_only_property2 = my_only_property2;
    this->m_my_only_property2_isSet = true;
}

bool PFXOtherObject::is_my_only_property2_Set() const{
    return m_my_only_property2_isSet;
}

bool PFXOtherObject::is_my_only_property2_Valid() const{
    return m_my_only_property2_isValid;
}

bool PFXOtherObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (my_only_property2.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool PFXOtherObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace test_namespace
