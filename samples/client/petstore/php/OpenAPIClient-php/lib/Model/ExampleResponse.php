<?php
/**
 * ExampleResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * dummy
 *
 * dummy
 *
 * The version of the OpenAPI document: dummy
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ExampleResponse Class Doc Comment
 *
 * @category Class
 * @description dummy
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ExampleResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ExampleResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'empty_string' => 'string',
        'number_string' => 'string',
        'bool_string' => 'string',
        'null_string' => 'string',
        'a_bool' => 'bool',
        'zero' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'empty_string' => null,
        'number_string' => null,
        'bool_string' => null,
        'null_string' => null,
        'a_bool' => null,
        'zero' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'empty_string' => false,
		'number_string' => false,
		'bool_string' => false,
		'null_string' => false,
		'a_bool' => false,
		'zero' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'empty_string' => 'emptyString',
        'number_string' => 'numberString',
        'bool_string' => 'boolString',
        'null_string' => 'nullString',
        'a_bool' => 'aBool',
        'zero' => 'zero'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'empty_string' => 'setEmptyString',
        'number_string' => 'setNumberString',
        'bool_string' => 'setBoolString',
        'null_string' => 'setNullString',
        'a_bool' => 'setABool',
        'zero' => 'setZero'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'empty_string' => 'getEmptyString',
        'number_string' => 'getNumberString',
        'bool_string' => 'getBoolString',
        'null_string' => 'getNullString',
        'a_bool' => 'getABool',
        'zero' => 'getZero'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('empty_string', $data ?? [], '');
        $this->setIfExists('number_string', $data ?? [], '42');
        $this->setIfExists('bool_string', $data ?? [], 'false');
        $this->setIfExists('null_string', $data ?? [], 'null');
        $this->setIfExists('a_bool', $data ?? [], false);
        $this->setIfExists('zero', $data ?? [], 0);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets empty_string
     *
     * @return string|null
     */
    public function getEmptyString()
    {
        return $this->container['empty_string'];
    }

    /**
     * Sets empty_string
     *
     * @param string|null $empty_string empty_string
     *
     * @return self
     */
    public function setEmptyString($empty_string)
    {
        if (is_null($empty_string)) {
            throw new \InvalidArgumentException('non-nullable empty_string cannot be null');
        }
        $this->container['empty_string'] = $empty_string;

        return $this;
    }

    /**
     * Gets number_string
     *
     * @return string|null
     */
    public function getNumberString()
    {
        return $this->container['number_string'];
    }

    /**
     * Sets number_string
     *
     * @param string|null $number_string number_string
     *
     * @return self
     */
    public function setNumberString($number_string)
    {
        if (is_null($number_string)) {
            throw new \InvalidArgumentException('non-nullable number_string cannot be null');
        }
        $this->container['number_string'] = $number_string;

        return $this;
    }

    /**
     * Gets bool_string
     *
     * @return string|null
     */
    public function getBoolString()
    {
        return $this->container['bool_string'];
    }

    /**
     * Sets bool_string
     *
     * @param string|null $bool_string bool_string
     *
     * @return self
     */
    public function setBoolString($bool_string)
    {
        if (is_null($bool_string)) {
            throw new \InvalidArgumentException('non-nullable bool_string cannot be null');
        }
        $this->container['bool_string'] = $bool_string;

        return $this;
    }

    /**
     * Gets null_string
     *
     * @return string|null
     */
    public function getNullString()
    {
        return $this->container['null_string'];
    }

    /**
     * Sets null_string
     *
     * @param string|null $null_string null_string
     *
     * @return self
     */
    public function setNullString($null_string)
    {
        if (is_null($null_string)) {
            throw new \InvalidArgumentException('non-nullable null_string cannot be null');
        }
        $this->container['null_string'] = $null_string;

        return $this;
    }

    /**
     * Gets a_bool
     *
     * @return bool|null
     */
    public function getABool()
    {
        return $this->container['a_bool'];
    }

    /**
     * Sets a_bool
     *
     * @param bool|null $a_bool a_bool
     *
     * @return self
     */
    public function setABool($a_bool)
    {
        if (is_null($a_bool)) {
            throw new \InvalidArgumentException('non-nullable a_bool cannot be null');
        }
        $this->container['a_bool'] = $a_bool;

        return $this;
    }

    /**
     * Gets zero
     *
     * @return int|null
     */
    public function getZero()
    {
        return $this->container['zero'];
    }

    /**
     * Sets zero
     *
     * @param int|null $zero zero
     *
     * @return self
     */
    public function setZero($zero)
    {
        if (is_null($zero)) {
            throw new \InvalidArgumentException('non-nullable zero cannot be null');
        }
        $this->container['zero'] = $zero;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


