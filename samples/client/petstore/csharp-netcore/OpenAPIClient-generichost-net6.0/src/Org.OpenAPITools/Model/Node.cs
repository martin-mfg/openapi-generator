// <auto-generated>
/*
 * dummy
 *
 * dummy
 *
 * The version of the OpenAPI document: dummy
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = Org.OpenAPITools.Client.ClientUtils;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// dummy
    /// </summary>
    public partial class Node : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Node" /> class.
        /// </summary>
        /// <param name="left">left</param>
        /// <param name="right">right</param>
        [JsonConstructor]
        public Node(Node left, Node right)
        {
            Left = left;
            Right = right;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Left
        /// </summary>
        [JsonPropertyName("left")]
        public Node Left { get; set; }

        /// <summary>
        /// Gets or Sets Right
        /// </summary>
        [JsonPropertyName("right")]
        public Node Right { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Node {\n");
            sb.Append("  Left: ").Append(Left).Append("\n");
            sb.Append("  Right: ").Append(Right).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Node" />
    /// </summary>
    public class NodeJsonConverter : JsonConverter<Node>
    {
        /// <summary>
        /// Deserializes json to <see cref="Node" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Node Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Node left = default;
            Node right = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string propertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (propertyName)
                    {
                        case "left":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                left = JsonSerializer.Deserialize<Node>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "right":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                right = JsonSerializer.Deserialize<Node>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (left == null)
                throw new ArgumentNullException(nameof(left), "Property is required for class Node.");

            if (right == null)
                throw new ArgumentNullException(nameof(right), "Property is required for class Node.");

            return new Node(left, right);
        }

        /// <summary>
        /// Serializes a <see cref="Node" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="node"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Node node, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            writer.WritePropertyName("left");
            JsonSerializer.Serialize(writer, node.Left, jsonSerializerOptions);
            writer.WritePropertyName("right");
            JsonSerializer.Serialize(writer, node.Right, jsonSerializerOptions);

            writer.WriteEndObject();
        }
    }
}
