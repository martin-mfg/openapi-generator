// <auto-generated>
/*
 * dummy
 *
 * dummy
 *
 * The version of the OpenAPI document: dummy
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = Org.OpenAPITools.Client.ClientUtils;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// dummy
    /// </summary>
    public partial class ExampleResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExampleResponse" /> class.
        /// </summary>
        /// <param name="aBool">aBool (default to false)</param>
        /// <param name="boolString">boolString (default to &quot;false&quot;)</param>
        /// <param name="emptyString">emptyString (default to &quot;&quot;)</param>
        /// <param name="nullString">nullString (default to &quot;null&quot;)</param>
        /// <param name="numberString">numberString (default to &quot;42&quot;)</param>
        /// <param name="zero">zero (default to 0)</param>
        [JsonConstructor]
        public ExampleResponse(bool aBool = false, string boolString = @"false", string emptyString = @"", string nullString = @"null", string numberString = @"42", int zero = 0)
        {
            ABool = aBool;
            BoolString = boolString;
            EmptyString = emptyString;
            NullString = nullString;
            NumberString = numberString;
            Zero = zero;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ABool
        /// </summary>
        /// <example>false</example>
        [JsonPropertyName("aBool")]
        public bool ABool { get; set; }

        /// <summary>
        /// Gets or Sets BoolString
        /// </summary>
        /// <example>false</example>
        [JsonPropertyName("boolString")]
        public string BoolString { get; set; }

        /// <summary>
        /// Gets or Sets EmptyString
        /// </summary>
        [JsonPropertyName("emptyString")]
        public string EmptyString { get; set; }

        /// <summary>
        /// Gets or Sets NullString
        /// </summary>
        /// <example>null</example>
        [JsonPropertyName("nullString")]
        public string NullString { get; set; }

        /// <summary>
        /// Gets or Sets NumberString
        /// </summary>
        /// <example>42</example>
        [JsonPropertyName("numberString")]
        public string NumberString { get; set; }

        /// <summary>
        /// Gets or Sets Zero
        /// </summary>
        /// <example>0</example>
        [JsonPropertyName("zero")]
        public int Zero { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExampleResponse {\n");
            sb.Append("  ABool: ").Append(ABool).Append("\n");
            sb.Append("  BoolString: ").Append(BoolString).Append("\n");
            sb.Append("  EmptyString: ").Append(EmptyString).Append("\n");
            sb.Append("  NullString: ").Append(NullString).Append("\n");
            sb.Append("  NumberString: ").Append(NumberString).Append("\n");
            sb.Append("  Zero: ").Append(Zero).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ExampleResponse" />
    /// </summary>
    public class ExampleResponseJsonConverter : JsonConverter<ExampleResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="ExampleResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ExampleResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            bool? aBool = default;
            string boolString = default;
            string emptyString = default;
            string nullString = default;
            string numberString = default;
            int? zero = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string propertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (propertyName)
                    {
                        case "aBool":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                aBool = utf8JsonReader.GetBoolean();
                            break;
                        case "boolString":
                            boolString = utf8JsonReader.GetString();
                            break;
                        case "emptyString":
                            emptyString = utf8JsonReader.GetString();
                            break;
                        case "nullString":
                            nullString = utf8JsonReader.GetString();
                            break;
                        case "numberString":
                            numberString = utf8JsonReader.GetString();
                            break;
                        case "zero":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                zero = utf8JsonReader.GetInt32();
                            break;
                        default:
                            break;
                    }
                }
            }

            if (aBool == null)
                throw new ArgumentNullException(nameof(aBool), "Property is required for class ExampleResponse.");

            if (boolString == null)
                throw new ArgumentNullException(nameof(boolString), "Property is required for class ExampleResponse.");

            if (emptyString == null)
                throw new ArgumentNullException(nameof(emptyString), "Property is required for class ExampleResponse.");

            if (nullString == null)
                throw new ArgumentNullException(nameof(nullString), "Property is required for class ExampleResponse.");

            if (numberString == null)
                throw new ArgumentNullException(nameof(numberString), "Property is required for class ExampleResponse.");

            if (zero == null)
                throw new ArgumentNullException(nameof(zero), "Property is required for class ExampleResponse.");

            return new ExampleResponse(aBool.Value, boolString, emptyString, nullString, numberString, zero.Value);
        }

        /// <summary>
        /// Serializes a <see cref="ExampleResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="exampleResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ExampleResponse exampleResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            writer.WriteBoolean("aBool", exampleResponse.ABool);
            writer.WriteString("boolString", exampleResponse.BoolString);
            writer.WriteString("emptyString", exampleResponse.EmptyString);
            writer.WriteString("nullString", exampleResponse.NullString);
            writer.WriteString("numberString", exampleResponse.NumberString);
            writer.WriteNumber("zero", exampleResponse.Zero);

            writer.WriteEndObject();
        }
    }
}
