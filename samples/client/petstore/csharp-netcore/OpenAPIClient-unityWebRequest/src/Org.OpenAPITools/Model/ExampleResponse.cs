/*
 * dummy
 *
 * dummy
 *
 * The version of the OpenAPI document: dummy
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// dummy
    /// </summary>
    [DataContract(Name = "ExampleResponse")]
    public partial class ExampleResponse : IEquatable<ExampleResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExampleResponse" /> class.
        /// </summary>
        /// <param name="emptyString">emptyString (default to &quot;&quot;).</param>
        /// <param name="numberString">numberString (default to &quot;42&quot;).</param>
        /// <param name="boolString">boolString (default to &quot;false&quot;).</param>
        /// <param name="nullString">nullString (default to &quot;null&quot;).</param>
        /// <param name="aBool">aBool (default to false).</param>
        /// <param name="zero">zero (default to 0).</param>
        public ExampleResponse(string emptyString = @"", string numberString = @"42", string boolString = @"false", string nullString = @"null", bool aBool = false, int zero = 0)
        {
            // use default value if no "emptyString" provided
            this.EmptyString = emptyString ?? @"";
            // use default value if no "numberString" provided
            this.NumberString = numberString ?? @"42";
            // use default value if no "boolString" provided
            this.BoolString = boolString ?? @"false";
            // use default value if no "nullString" provided
            this.NullString = nullString ?? @"null";
            this.ABool = aBool;
            this.Zero = zero;
        }

        /// <summary>
        /// Gets or Sets EmptyString
        /// </summary>
        [DataMember(Name = "emptyString", EmitDefaultValue = false)]
        public string EmptyString { get; set; }

        /// <summary>
        /// Gets or Sets NumberString
        /// </summary>
        /// <example>42</example>
        [DataMember(Name = "numberString", EmitDefaultValue = false)]
        public string NumberString { get; set; }

        /// <summary>
        /// Gets or Sets BoolString
        /// </summary>
        /// <example>false</example>
        [DataMember(Name = "boolString", EmitDefaultValue = false)]
        public string BoolString { get; set; }

        /// <summary>
        /// Gets or Sets NullString
        /// </summary>
        /// <example>null</example>
        [DataMember(Name = "nullString", EmitDefaultValue = false)]
        public string NullString { get; set; }

        /// <summary>
        /// Gets or Sets ABool
        /// </summary>
        /// <example>false</example>
        [DataMember(Name = "aBool", EmitDefaultValue = true)]
        public bool ABool { get; set; }

        /// <summary>
        /// Gets or Sets Zero
        /// </summary>
        /// <example>0</example>
        [DataMember(Name = "zero", EmitDefaultValue = false)]
        public int Zero { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExampleResponse {\n");
            sb.Append("  EmptyString: ").Append(EmptyString).Append("\n");
            sb.Append("  NumberString: ").Append(NumberString).Append("\n");
            sb.Append("  BoolString: ").Append(BoolString).Append("\n");
            sb.Append("  NullString: ").Append(NullString).Append("\n");
            sb.Append("  ABool: ").Append(ABool).Append("\n");
            sb.Append("  Zero: ").Append(Zero).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExampleResponse);
        }

        /// <summary>
        /// Returns true if ExampleResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ExampleResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExampleResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EmptyString == input.EmptyString ||
                    (this.EmptyString != null &&
                    this.EmptyString.Equals(input.EmptyString))
                ) && 
                (
                    this.NumberString == input.NumberString ||
                    (this.NumberString != null &&
                    this.NumberString.Equals(input.NumberString))
                ) && 
                (
                    this.BoolString == input.BoolString ||
                    (this.BoolString != null &&
                    this.BoolString.Equals(input.BoolString))
                ) && 
                (
                    this.NullString == input.NullString ||
                    (this.NullString != null &&
                    this.NullString.Equals(input.NullString))
                ) && 
                (
                    this.ABool == input.ABool ||
                    this.ABool.Equals(input.ABool)
                ) && 
                (
                    this.Zero == input.Zero ||
                    this.Zero.Equals(input.Zero)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmptyString != null)
                {
                    hashCode = (hashCode * 59) + this.EmptyString.GetHashCode();
                }
                if (this.NumberString != null)
                {
                    hashCode = (hashCode * 59) + this.NumberString.GetHashCode();
                }
                if (this.BoolString != null)
                {
                    hashCode = (hashCode * 59) + this.BoolString.GetHashCode();
                }
                if (this.NullString != null)
                {
                    hashCode = (hashCode * 59) + this.NullString.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ABool.GetHashCode();
                hashCode = (hashCode * 59) + this.Zero.GetHashCode();
                return hashCode;
            }
        }

    }

}
