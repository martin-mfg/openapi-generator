/*
 * dummy
 *
 * dummy
 *
 * The version of the OpenAPI document: dummy
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Dummy200ResponseOuterPropInnerProp
    /// </summary>
    [DataContract(Name = "dummy_200_response_outerProp_innerProp")]
    public partial class Dummy200ResponseOuterPropInnerProp : IEquatable<Dummy200ResponseOuterPropInnerProp>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Dummy200ResponseOuterPropInnerProp" /> class.
        /// </summary>
        /// <param name="myBool">myBool.</param>
        public Dummy200ResponseOuterPropInnerProp(bool myBool = default(bool))
        {
            this.MyBool = myBool;
        }

        /// <summary>
        /// Gets or Sets MyBool
        /// </summary>
        [DataMember(Name = "myBool", EmitDefaultValue = true)]
        public bool MyBool { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Dummy200ResponseOuterPropInnerProp {\n");
            sb.Append("  MyBool: ").Append(MyBool).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Dummy200ResponseOuterPropInnerProp);
        }

        /// <summary>
        /// Returns true if Dummy200ResponseOuterPropInnerProp instances are equal
        /// </summary>
        /// <param name="input">Instance of Dummy200ResponseOuterPropInnerProp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Dummy200ResponseOuterPropInnerProp input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MyBool == input.MyBool ||
                    this.MyBool.Equals(input.MyBool)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MyBool.GetHashCode();
                return hashCode;
            }
        }

    }

}
