{-
   dummy

   dummy

   OpenAPI Version: 3.0.0
   dummy API version: dummy
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Dummy.Model
-}

{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveFoldable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TupleSections #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -fno-warn-unused-matches -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Dummy.Model where

import Dummy.Core
import Dummy.MimeTypes

import Data.Aeson ((.:),(.:!),(.:?),(.=))

import qualified Control.Arrow as P (left)
import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Base64 as B64
import qualified Data.ByteString.Char8 as BC
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.HashMap.Lazy as HM
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Set as Set
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Time as TI
import qualified Lens.Micro as L
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Control.Applicative ((<|>))
import Control.Applicative (Alternative)
import Data.Function ((&))
import Data.Monoid ((<>))
import Data.Text (Text)
import Prelude (($),(/=),(.),(<$>),(<*>),(>>=),(=<<),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)

import qualified Prelude as P



-- * Parameter newtypes


-- * Models


-- ** ExampleResponse
-- | ExampleResponse
-- dummy
data ExampleResponse = ExampleResponse
  { exampleResponseEmptyString :: !(Maybe Text) -- ^ "emptyString"
  , exampleResponseNumberString :: !(Maybe Text) -- ^ "numberString"
  , exampleResponseBoolString :: !(Maybe Text) -- ^ "boolString"
  , exampleResponseNullString :: !(Maybe Text) -- ^ "nullString"
  , exampleResponseABool :: !(Maybe Bool) -- ^ "aBool"
  , exampleResponseZero :: !(Maybe Int) -- ^ "zero"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ExampleResponse
instance A.FromJSON ExampleResponse where
  parseJSON = A.withObject "ExampleResponse" $ \o ->
    ExampleResponse
      <$> (o .:? "emptyString")
      <*> (o .:? "numberString")
      <*> (o .:? "boolString")
      <*> (o .:? "nullString")
      <*> (o .:? "aBool")
      <*> (o .:? "zero")

-- | ToJSON ExampleResponse
instance A.ToJSON ExampleResponse where
  toJSON ExampleResponse {..} =
   _omitNulls
      [ "emptyString" .= exampleResponseEmptyString
      , "numberString" .= exampleResponseNumberString
      , "boolString" .= exampleResponseBoolString
      , "nullString" .= exampleResponseNullString
      , "aBool" .= exampleResponseABool
      , "zero" .= exampleResponseZero
      ]


-- | Construct a value of type 'ExampleResponse' (by applying it's required fields, if any)
mkExampleResponse
  :: ExampleResponse
mkExampleResponse =
  ExampleResponse
  { exampleResponseEmptyString = Nothing
  , exampleResponseNumberString = Nothing
  , exampleResponseBoolString = Nothing
  , exampleResponseNullString = Nothing
  , exampleResponseABool = Nothing
  , exampleResponseZero = Nothing
  }





