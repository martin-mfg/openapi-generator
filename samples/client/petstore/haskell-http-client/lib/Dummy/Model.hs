{-
   dummy

   dummy

   OpenAPI Version: 3.0.0
   dummy API version: dummy
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Dummy.Model
-}

{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveFoldable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TupleSections #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -fno-warn-unused-matches -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Dummy.Model where

import Dummy.Core
import Dummy.MimeTypes

import Data.Aeson ((.:),(.:!),(.:?),(.=))

import qualified Control.Arrow as P (left)
import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Base64 as B64
import qualified Data.ByteString.Char8 as BC
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.HashMap.Lazy as HM
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Set as Set
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Time as TI
import qualified Lens.Micro as L
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Control.Applicative ((<|>))
import Control.Applicative (Alternative)
import Data.Function ((&))
import Data.Monoid ((<>))
import Data.Text (Text)
import Prelude (($),(/=),(.),(<$>),(<*>),(>>=),(=<<),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)

import qualified Prelude as P



-- * Parameter newtypes


-- * Models


-- ** ExampleResponse
-- | ExampleResponse
-- dummy
data ExampleResponse = ExampleResponse
  { exampleResponseMyOnlyProperty :: !(Maybe OtherObject) -- ^ "myOnlyProperty"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ExampleResponse
instance A.FromJSON ExampleResponse where
  parseJSON = A.withObject "ExampleResponse" $ \o ->
    ExampleResponse
      <$> (o .:? "myOnlyProperty")

-- | ToJSON ExampleResponse
instance A.ToJSON ExampleResponse where
  toJSON ExampleResponse {..} =
   _omitNulls
      [ "myOnlyProperty" .= exampleResponseMyOnlyProperty
      ]


-- | Construct a value of type 'ExampleResponse' (by applying it's required fields, if any)
mkExampleResponse
  :: ExampleResponse
mkExampleResponse =
  ExampleResponse
  { exampleResponseMyOnlyProperty = Nothing
  }

-- ** OtherObject
-- | OtherObject
-- dummy
data OtherObject = OtherObject
  { otherObjectMyOnlyProperty2 :: !(Maybe ExampleResponse) -- ^ "myOnlyProperty2"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON OtherObject
instance A.FromJSON OtherObject where
  parseJSON = A.withObject "OtherObject" $ \o ->
    OtherObject
      <$> (o .:? "myOnlyProperty2")

-- | ToJSON OtherObject
instance A.ToJSON OtherObject where
  toJSON OtherObject {..} =
   _omitNulls
      [ "myOnlyProperty2" .= otherObjectMyOnlyProperty2
      ]


-- | Construct a value of type 'OtherObject' (by applying it's required fields, if any)
mkOtherObject
  :: OtherObject
mkOtherObject =
  OtherObject
  { otherObjectMyOnlyProperty2 = Nothing
  }





