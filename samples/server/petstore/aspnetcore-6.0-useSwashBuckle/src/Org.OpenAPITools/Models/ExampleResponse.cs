/*
 * dummy
 *
 * dummy
 *
 * The version of the OpenAPI document: dummy
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// dummy
    /// </summary>
    [DataContract]
    public class ExampleResponse : IEquatable<ExampleResponse>
    {
        /// <summary>
        /// Gets or Sets EmptyString
        /// </summary>
        [DataMember(Name="emptyString", EmitDefaultValue=false)]
        public string EmptyString { get; set; } = "";

        /// <summary>
        /// Gets or Sets NumberString
        /// </summary>
        /// <example>42</example>
        [DataMember(Name="numberString", EmitDefaultValue=false)]
        public string NumberString { get; set; } = "42";

        /// <summary>
        /// Gets or Sets BoolString
        /// </summary>
        /// <example>false</example>
        [DataMember(Name="boolString", EmitDefaultValue=false)]
        public string BoolString { get; set; } = "false";

        /// <summary>
        /// Gets or Sets NullString
        /// </summary>
        /// <example>null</example>
        [DataMember(Name="nullString", EmitDefaultValue=false)]
        public string NullString { get; set; } = "null";

        /// <summary>
        /// Gets or Sets ABool
        /// </summary>
        /// <example>false</example>
        [DataMember(Name="aBool", EmitDefaultValue=true)]
        public bool ABool { get; set; } = false;

        /// <summary>
        /// Gets or Sets Zero
        /// </summary>
        /// <example>0</example>
        [DataMember(Name="zero", EmitDefaultValue=true)]
        public int Zero { get; set; } = 0;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExampleResponse {\n");
            sb.Append("  EmptyString: ").Append(EmptyString).Append("\n");
            sb.Append("  NumberString: ").Append(NumberString).Append("\n");
            sb.Append("  BoolString: ").Append(BoolString).Append("\n");
            sb.Append("  NullString: ").Append(NullString).Append("\n");
            sb.Append("  ABool: ").Append(ABool).Append("\n");
            sb.Append("  Zero: ").Append(Zero).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ExampleResponse)obj);
        }

        /// <summary>
        /// Returns true if ExampleResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ExampleResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExampleResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EmptyString == other.EmptyString ||
                    EmptyString != null &&
                    EmptyString.Equals(other.EmptyString)
                ) && 
                (
                    NumberString == other.NumberString ||
                    NumberString != null &&
                    NumberString.Equals(other.NumberString)
                ) && 
                (
                    BoolString == other.BoolString ||
                    BoolString != null &&
                    BoolString.Equals(other.BoolString)
                ) && 
                (
                    NullString == other.NullString ||
                    NullString != null &&
                    NullString.Equals(other.NullString)
                ) && 
                (
                    ABool == other.ABool ||
                    
                    ABool.Equals(other.ABool)
                ) && 
                (
                    Zero == other.Zero ||
                    
                    Zero.Equals(other.Zero)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EmptyString != null)
                    hashCode = hashCode * 59 + EmptyString.GetHashCode();
                    if (NumberString != null)
                    hashCode = hashCode * 59 + NumberString.GetHashCode();
                    if (BoolString != null)
                    hashCode = hashCode * 59 + BoolString.GetHashCode();
                    if (NullString != null)
                    hashCode = hashCode * 59 + NullString.GetHashCode();
                    
                    hashCode = hashCode * 59 + ABool.GetHashCode();
                    
                    hashCode = hashCode * 59 + Zero.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ExampleResponse left, ExampleResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ExampleResponse left, ExampleResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
