/**
 * dummy
 * dummy
 *
 * The version of the OpenAPI document: dummy
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExampleResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExampleResponse::OAIExampleResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExampleResponse::OAIExampleResponse() {
    this->initializeModel();
}

OAIExampleResponse::~OAIExampleResponse() {}

void OAIExampleResponse::initializeModel() {

    m_empty_string_isSet = false;
    m_empty_string_isValid = false;

    m_number_string_isSet = false;
    m_number_string_isValid = false;

    m_bool_string_isSet = false;
    m_bool_string_isValid = false;

    m_null_string_isSet = false;
    m_null_string_isValid = false;

    m_a_bool_isSet = false;
    m_a_bool_isValid = false;

    m_zero_isSet = false;
    m_zero_isValid = false;
}

void OAIExampleResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExampleResponse::fromJsonObject(QJsonObject json) {

    m_empty_string_isValid = ::OpenAPI::fromJsonValue(empty_string, json[QString("emptyString")]);
    m_empty_string_isSet = !json[QString("emptyString")].isNull() && m_empty_string_isValid;

    m_number_string_isValid = ::OpenAPI::fromJsonValue(number_string, json[QString("numberString")]);
    m_number_string_isSet = !json[QString("numberString")].isNull() && m_number_string_isValid;

    m_bool_string_isValid = ::OpenAPI::fromJsonValue(bool_string, json[QString("boolString")]);
    m_bool_string_isSet = !json[QString("boolString")].isNull() && m_bool_string_isValid;

    m_null_string_isValid = ::OpenAPI::fromJsonValue(null_string, json[QString("nullString")]);
    m_null_string_isSet = !json[QString("nullString")].isNull() && m_null_string_isValid;

    m_a_bool_isValid = ::OpenAPI::fromJsonValue(a_bool, json[QString("aBool")]);
    m_a_bool_isSet = !json[QString("aBool")].isNull() && m_a_bool_isValid;

    m_zero_isValid = ::OpenAPI::fromJsonValue(zero, json[QString("zero")]);
    m_zero_isSet = !json[QString("zero")].isNull() && m_zero_isValid;
}

QString OAIExampleResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExampleResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_empty_string_isSet) {
        obj.insert(QString("emptyString"), ::OpenAPI::toJsonValue(empty_string));
    }
    if (m_number_string_isSet) {
        obj.insert(QString("numberString"), ::OpenAPI::toJsonValue(number_string));
    }
    if (m_bool_string_isSet) {
        obj.insert(QString("boolString"), ::OpenAPI::toJsonValue(bool_string));
    }
    if (m_null_string_isSet) {
        obj.insert(QString("nullString"), ::OpenAPI::toJsonValue(null_string));
    }
    if (m_a_bool_isSet) {
        obj.insert(QString("aBool"), ::OpenAPI::toJsonValue(a_bool));
    }
    if (m_zero_isSet) {
        obj.insert(QString("zero"), ::OpenAPI::toJsonValue(zero));
    }
    return obj;
}

QString OAIExampleResponse::getEmptyString() const {
    return empty_string;
}
void OAIExampleResponse::setEmptyString(const QString &empty_string) {
    this->empty_string = empty_string;
    this->m_empty_string_isSet = true;
}

bool OAIExampleResponse::is_empty_string_Set() const{
    return m_empty_string_isSet;
}

bool OAIExampleResponse::is_empty_string_Valid() const{
    return m_empty_string_isValid;
}

QString OAIExampleResponse::getNumberString() const {
    return number_string;
}
void OAIExampleResponse::setNumberString(const QString &number_string) {
    this->number_string = number_string;
    this->m_number_string_isSet = true;
}

bool OAIExampleResponse::is_number_string_Set() const{
    return m_number_string_isSet;
}

bool OAIExampleResponse::is_number_string_Valid() const{
    return m_number_string_isValid;
}

QString OAIExampleResponse::getBoolString() const {
    return bool_string;
}
void OAIExampleResponse::setBoolString(const QString &bool_string) {
    this->bool_string = bool_string;
    this->m_bool_string_isSet = true;
}

bool OAIExampleResponse::is_bool_string_Set() const{
    return m_bool_string_isSet;
}

bool OAIExampleResponse::is_bool_string_Valid() const{
    return m_bool_string_isValid;
}

QString OAIExampleResponse::getNullString() const {
    return null_string;
}
void OAIExampleResponse::setNullString(const QString &null_string) {
    this->null_string = null_string;
    this->m_null_string_isSet = true;
}

bool OAIExampleResponse::is_null_string_Set() const{
    return m_null_string_isSet;
}

bool OAIExampleResponse::is_null_string_Valid() const{
    return m_null_string_isValid;
}

bool OAIExampleResponse::isABool() const {
    return a_bool;
}
void OAIExampleResponse::setABool(const bool &a_bool) {
    this->a_bool = a_bool;
    this->m_a_bool_isSet = true;
}

bool OAIExampleResponse::is_a_bool_Set() const{
    return m_a_bool_isSet;
}

bool OAIExampleResponse::is_a_bool_Valid() const{
    return m_a_bool_isValid;
}

qint32 OAIExampleResponse::getZero() const {
    return zero;
}
void OAIExampleResponse::setZero(const qint32 &zero) {
    this->zero = zero;
    this->m_zero_isSet = true;
}

bool OAIExampleResponse::is_zero_Set() const{
    return m_zero_isSet;
}

bool OAIExampleResponse::is_zero_Valid() const{
    return m_zero_isValid;
}

bool OAIExampleResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_empty_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bool_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_null_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_a_bool_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zero_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExampleResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
