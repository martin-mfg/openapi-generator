/**
 * dummy
 * dummy
 *
 * The version of the OpenAPI document: dummy
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ExampleResponse.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ExampleResponse::ExampleResponse(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string ExampleResponse::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void ExampleResponse::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree ExampleResponse::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("emptyString", m_EmptyString);
	pt.put("numberString", m_NumberString);
	pt.put("boolString", m_BoolString);
	pt.put("nullString", m_NullString);
	pt.put("aBool", m_ABool);
	pt.put("zero", m_Zero);
	return pt;
}

void ExampleResponse::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_EmptyString = pt.get("emptyString", "");
	m_NumberString = pt.get("numberString", "42");
	m_BoolString = pt.get("boolString", "false");
	m_NullString = pt.get("nullString", "null");
	m_ABool = pt.get("aBool", false);
	m_Zero = pt.get("zero", 0);
}

std::string ExampleResponse::getEmptyString() const
{
    return m_EmptyString;
}

void ExampleResponse::setEmptyString(std::string value)
{
    m_EmptyString = value;
}


std::string ExampleResponse::getNumberString() const
{
    return m_NumberString;
}

void ExampleResponse::setNumberString(std::string value)
{
    m_NumberString = value;
}


std::string ExampleResponse::getBoolString() const
{
    return m_BoolString;
}

void ExampleResponse::setBoolString(std::string value)
{
    m_BoolString = value;
}


std::string ExampleResponse::getNullString() const
{
    return m_NullString;
}

void ExampleResponse::setNullString(std::string value)
{
    m_NullString = value;
}


bool ExampleResponse::isABool() const
{
    return m_ABool;
}

void ExampleResponse::setABool(bool value)
{
    m_ABool = value;
}


int32_t ExampleResponse::getZero() const
{
    return m_Zero;
}

void ExampleResponse::setZero(int32_t value)
{
    m_Zero = value;
}



std::vector<ExampleResponse> createExampleResponseVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<ExampleResponse>();
    for (const auto& child: pt) {
        vec.emplace_back(ExampleResponse(child.second));
    }

    return vec;
}

}
}
}
}

