/**
 * dummy
 * dummy
 *
 * The version of the OpenAPI document: dummy
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OtherObject.h
 *
 * dummy
 */

#ifndef OtherObject_H_
#define OtherObject_H_



#include "ExampleResponse.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// dummy
/// </summary>
class  OtherObject 
{
public:
    OtherObject() = default;
    explicit OtherObject(boost::property_tree::ptree const& pt);
    virtual ~OtherObject() = default;

    OtherObject(const OtherObject& other) = default; // copy constructor
    OtherObject(OtherObject&& other) noexcept = default; // move constructor

    OtherObject& operator=(const OtherObject& other) = default; // copy assignment
    OtherObject& operator=(OtherObject&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// OtherObject members

    /// <summary>
    /// 
    /// </summary>
    ExampleResponse getMyOnlyProperty2() const;
    void setMyOnlyProperty2(ExampleResponse value);

protected:
    ExampleResponse m_MyOnlyProperty2;
};

std::vector<OtherObject> createOtherObjectVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<OtherObject>(const OtherObject& val) {
    return val.toPropertyTree();
}

template<>
inline OtherObject fromPt<OtherObject>(const boost::property_tree::ptree& pt) {
    OtherObject ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* OtherObject_H_ */
