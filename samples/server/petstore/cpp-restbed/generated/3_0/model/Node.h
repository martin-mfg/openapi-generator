/**
 * dummy
 * dummy
 *
 * The version of the OpenAPI document: dummy
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Node.h
 *
 * dummy
 */

#ifndef Node_H_
#define Node_H_



#include "Node.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// dummy
/// </summary>
class  Node 
{
public:
    Node() = default;
    explicit Node(boost::property_tree::ptree const& pt);
    virtual ~Node() = default;

    Node(const Node& other) = default; // copy constructor
    Node(Node&& other) noexcept = default; // move constructor

    Node& operator=(const Node& other) = default; // copy assignment
    Node& operator=(Node&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// Node members

    /// <summary>
    /// 
    /// </summary>
    Node getLeft() const;
    void setLeft(Node value);

    /// <summary>
    /// 
    /// </summary>
    Node getRight() const;
    void setRight(Node value);

protected:
    Node m_Left;
    Node m_Right;
};

std::vector<Node> createNodeVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<Node>(const Node& val) {
    return val.toPropertyTree();
}

template<>
inline Node fromPt<Node>(const boost::property_tree::ptree& pt) {
    Node ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* Node_H_ */
