# coding: utf-8

"""
    dummy

    dummy  # noqa: E501

    The version of the OpenAPI document: dummy
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class ExampleResponse(BaseModel):
    """
    dummy
    """
    empty_string: Optional[StrictStr] = Field('', alias="emptyString")
    number_string: Optional[StrictStr] = Field('42', alias="numberString")
    bool_string: Optional[StrictStr] = Field('false', alias="boolString")
    null_string: Optional[StrictStr] = Field('null', alias="nullString")
    a_bool: Optional[StrictBool] = Field(False, alias="aBool")
    zero: Optional[StrictInt] = 0
    additional_properties: Dict[str, Any] = {}
    __properties = ["emptyString", "numberString", "boolString", "nullString", "aBool", "zero"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExampleResponse:
        """Create an instance of ExampleResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExampleResponse:
        """Create an instance of ExampleResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExampleResponse.parse_obj(obj)

        _obj = ExampleResponse.parse_obj({
            "empty_string": obj.get("emptyString") if obj.get("emptyString") is not None else '',
            "number_string": obj.get("numberString") if obj.get("numberString") is not None else '42',
            "bool_string": obj.get("boolString") if obj.get("boolString") is not None else 'false',
            "null_string": obj.get("nullString") if obj.get("nullString") is not None else 'null',
            "a_bool": obj.get("aBool") if obj.get("aBool") is not None else False,
            "zero": obj.get("zero") if obj.get("zero") is not None else 0
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

